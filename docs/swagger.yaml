basePath: /
definitions:
  controllers.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.PaymentRequest:
    properties:
      channel_code:
        type: string
      payment_method:
        enum:
        - QR_CODE
        - VIRTUAL_ACCOUNT
        - EWALLET
        type: string
      rental_id:
        type: string
    required:
    - channel_code
    - payment_method
    - rental_id
    type: object
  models.Equipment:
    properties:
      category_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      is_available:
        type: boolean
      name:
        type: string
      rental_price:
        type: number
      slug:
        type: string
      stock_quantity:
        type: integer
    type: object
  models.EquipmentCategory:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.Rental:
    properties:
      end_date:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.RentalItem'
        type: array
      start_date:
        type: string
      status:
        type: string
      total_cost:
        type: number
      user_id:
        type: string
    type: object
  models.RentalItem:
    properties:
      equipment_id:
        type: string
      equipment_name:
        type: string
      id:
        type: string
      quantity:
        type: integer
      rental_id:
        type: string
    type: object
  models.UserRequest:
    properties:
      contact_number:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      role_name:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: kevinsofyan.13@gmail.com
    name: kevinsofyan
  description: This is a sample server for a Mini Project Invitified.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Mini Project Invitified
  version: "1.0"
paths:
  /categories:
    get:
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EquipmentCategory'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new equipment category
      parameters:
      - description: Equipment Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.EquipmentCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.EquipmentCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new equipment category
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Delete a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a category
      tags:
      - categories
    get:
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EquipmentCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Equipment Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.EquipmentCategory'
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EquipmentCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a category
      tags:
      - categories
  /equipment:
    get:
      description: Get all equipment
      parameters:
      - description: Category ID
        in: query
        name: category_id
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all equipment
      tags:
      - equipment
    post:
      consumes:
      - application/json
      description: Create a new equipment
      parameters:
      - description: Equipment
        in: body
        name: equipment
        required: true
        schema:
          $ref: '#/definitions/models.Equipment'
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Equipment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new equipment
      tags:
      - equipment
  /equipment/{slug}:
    delete:
      description: Delete equipment
      parameters:
      - description: Equipment Slug
        in: path
        name: slug
        required: true
        type: string
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete equipment
      tags:
      - equipment
    get:
      description: Get equipment by slug
      parameters:
      - description: Equipment Slug
        in: path
        name: slug
        required: true
        type: string
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Equipment'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get equipment by slug
      tags:
      - equipment
    put:
      consumes:
      - application/json
      description: Update equipment
      parameters:
      - description: Equipment Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Equipment
        in: body
        name: equipment
        required: true
        schema:
          $ref: '#/definitions/models.Equipment'
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Equipment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update equipment
      tags:
      - equipment
  /payments:
    post:
      consumes:
      - application/json
      description: Create a new payment for a rental
      parameters:
      - description: Payment Request
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/controllers.PaymentRequest'
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new payment
      tags:
      - payments
  /rentals:
    get:
      description: Get all rentals
      parameters:
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Rental'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all rentals
      tags:
      - rentals
    post:
      consumes:
      - application/json
      description: Create a new rental
      parameters:
      - description: Rental
        in: body
        name: rental
        required: true
        schema:
          $ref: '#/definitions/models.Rental'
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Rental'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new rental
      tags:
      - rentals
  /rentals/{id}:
    delete:
      description: Delete a rental
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: string
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a rental
      tags:
      - rentals
    get:
      description: Get a rental by ID
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: string
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Rental'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a rental by ID
      tags:
      - rentals
    put:
      consumes:
      - application/json
      description: Update a rental
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: string
      - description: Rental
        in: body
        name: rental
        required: true
        schema:
          $ref: '#/definitions/models.Rental'
      - default: <token>
        description: token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Rental'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a rental
      tags:
      - rentals
  /users/{id}:
    delete:
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login a user
      tags:
      - users
  /users/profile:
    get:
      description: Get the profile of the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
